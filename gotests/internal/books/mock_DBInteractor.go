// Code generated by mockery v2.10.0. DO NOT EDIT.

package books

import (
	context "context"
	models "gotests/internal/books/models"

	mock "github.com/stretchr/testify/mock"
)

// MockDBInteractor is an autogenerated mock type for the DBInteractor type
type MockDBInteractor struct {
	mock.Mock
}

// AllBooks provides a mock function with given fields: ctx
func (_m *MockDBInteractor) AllBooks(ctx context.Context) ([]*models.Book, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Book
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookByID provides a mock function with given fields: ctx, id
func (_m *MockDBInteractor) BookByID(ctx context.Context, id int64) (*models.Book, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Book
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBook provides a mock function with given fields: ctx, book
func (_m *MockDBInteractor) SaveBook(ctx context.Context, book *models.Book) error {
	ret := _m.Called(ctx, book)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Book) error); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
